import '/styles/course-filling.css';

export function loadAboutWhatIsWeb() {
    return `
        <div class="whatIsWeb">
            <h1>Что такое веб-разработка?</h1>
            <p>Веб-разработка — это процесс создания и поддержки веб-сайтов или веб-приложений. Это то, что позволяет нам взаимодействовать с интернетом через красивые интерфейсы и функциональные платформы.
            </p>
            <h2>Основные понятия веб-разработки</h2>
            <h3>1. Фронтенд (Frontend)</h3>
                Пример:
                Нажмите на кнопку ниже, чтобы увидеть изменение цвета кнопки:
            <div style="text-align: center; margin: 20px;">
                <button id="changeButtonColor" style="padding: 10px 20px; font-size: 16px; background-color: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer;">
                    Изменить цвет кнопки
                </button>
            </div>
            <h3>2. Бэкенд (Backend)</h3>
            <p>Отвечает за работу сайта "изнутри".
                Пример:
                Когда вы вводите логин и пароль на сайте, сервер проверяет их в базе данных. Если данные верны, вы попадаете в личный кабинет.
            </p>
            <h3>3. Полный стек (Full Stack)</h3>
            <p>Специалисты, которые умеют создавать как видимую часть сайта, так и скрытые механизмы, называются Full Stack разработчиками.</p>
            <h4>Мини-викторина:</h4>
            <div class="question">
                <h3>Какой язык отвечает за стилизацию страницы?</h3>
                <div class="options">
                    <label>
                        <input type="checkbox" id="python"> Python
                    </label>
                    <label>
                        <input type="checkbox" id="css"> CSS
                    </label>
                    <label>
                        <input type="checkbox" id="sql"> SQL
                    </label>
                </div>
                <button onclick="checkAnswer()" style="background-color: #0078d4; color: #fff; border: none; padding: 10px 20px; cursor: pointer; border-radius: 5px;">Проверить</button>
                <div id="result" style="margin-top: 20px; font-weight: bold;"></div>
            </div>
            <script>
                // Функция для проверки викторины
                function checkAnswer() {
                    const python = document.getElementById('python').checked;
                    const css = document.getElementById('css').checked;
                    const sql = document.getElementById('sql').checked;

                    const result = document.getElementById('result');

                    if (css && !python && !sql) {
                        result.textContent = 'Правильно! CSS отвечает за стилизацию страницы.';
                        result.style.color = 'lightgreen';
                    } else {
                        result.textContent = 'Неправильно. Попробуйте ещё раз!';
                        result.style.color = 'red';
                    }
                }

                // Добавление обработчика для кнопки изменения цвета самой кнопки
                document.addEventListener('DOMContentLoaded', () => {
                    const button = document.getElementById('changeButtonColor');
                    if (button) {
                        button.addEventListener('click', () => {
                            button.style.backgroundColor = '#ff9800'; // Изменяем цвет фона кнопки
                            button.style.color = '#000'; // Изменяем цвет текста кнопки
                        });
                    }
                });
            </script>
        </div>
    `;
}


export function loadCourseGuide() {
    return `
        <div class="course-guide">
            <h1>Архитектура веб-приложений</h1>
            <p>Архитектура веб-приложений — это структура и организация компонентов, которые взаимодействуют друг с другом, обеспечивая работу приложения. Грамотно выстроенная архитектура помогает создать масштабируемые, производительные и удобные для пользователей веб-приложения.</p>
            <h2>Основные элементы архитектуры</h2>
            <h3>1. Клиентская часть (Frontend)</h3>
            <p>Это интерфейс приложения, который отображается в браузере пользователя.</p>
            <h4>Пример:</h4>
            <div class="examles"
            <div style="text-align: center; margin: 20px;"> <form onsubmit="alert('Форма отправлена!'); return false;" style="margin: 0 auto; max-width: 300px;"> <label for="name">Имя:</label><br> <input type="text" id="name" name="name" required style="width: 100%; margin-bottom: 10px; padding: 5px;"><br> <label for="email">Email:</label><br> <input type="email" id="email" name="email" required style="width: 100%; margin-bottom: 10px; padding: 5px;"><br> <button type="submit" style="padding: 10px 20px; background-color: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer;"> Отправить </button> </form> </div>

            <h4>Иллюстрация:</h4>
            <img src="/images/about_course2.jpg" alt="profile" class="responsive-image">
            <h2>2. Серверная часть (Backend)</h2>
            <p>Серверная часть обрабатывает запросы от клиента, выполняет бизнес-логику и взаимодействует с базой данных.</p>
            <h4>Пример:</h4>
            <h2>3. База данных</h2>
            <p>База данных хранит информацию, которую использует приложение (пользовательские данные, товары, заказы и т. д.).</p>
            <h4>Иллюстрация:</h4>
            <img src="/images/about_course3.jpg" alt="profile" class="responsive-image">
            <h2>Типы архитектуры веб-приложений</h2>
            <h3>1. Монолитная архитектура</h3>
            <p>Все компоненты приложения объединены в единый блок.
            Плюсы: Легкость в разработке.
            Минусы: Трудности с масштабированием.
            </p>
            <h3>2. Микросервисная архитектура</h3>
            <p>Приложение разделено на независимые сервисы, которые взаимодействуют друг с другом через API.
            </p>
            <h4>Пример интерактивного элемента:</h4>
            <p>Кнопка для отображения схемы взаимодействия сервисов.
            </p>
            <h3>3. Serverless-архитектура</h3>
            <p>Функции выполняются по запросу, без необходимости управления серверами.</p>
            <h4>Пример взаимодействия компонентов</h4>
            <p>Создайте анимацию:

            Пользователь нажимает кнопку на сайте.
            Запрос отправляется на сервер.
            Сервер обрабатывает запрос и отправляет данные из базы обратно клиенту.
            </p>
            <h4>Иллюстрация:</h4>
            <img src="/images/about_course5.jpg" alt="profile" class="responsive-image">

        </div>
    `;
}

export function loadDevInstruments() {
    return `
        <div class="devInstruments">
            <h1>Инструменты для разработки</h1>
            <p>Для создания современных веб-приложений разработчики используют разнообразные инструменты. Они помогают ускорить процесс разработки, упростить отладку и повысить качество конечного продукта.</p>
            <h2>1. Редакторы кода и IDE</h2>
            <p>Редакторы и интегрированные среды разработки (IDE) — это основные рабочие инструменты программистов.
            Популярные редакторы:
                <br>
                <b>Visual Studio Code</b> — мощный редактор с множеством расширений.
                <br>
                <b>WebStorm — IDE</b> оптимизированная для JavaScript.
                <br>
                <b>Sublime Text</b> — легкий и быстрый редактор кода.
                <br>
            </p>
            <h4>Пример:</h4>
            <div style="text-align: center; margin: 20px;"> <textarea rows="5" cols="50" placeholder="Напишите свой код здесь..." style="padding: 10px; border: 1px solid #ccc; border-radius: 5px;"></textarea> </div>
            <h4>Иллюстрация:</h4>
            <img src="/images/terminal-editor-grid.png" alt="profile" class="responsive-image">
            <h2>2. Системы контроля версий</h2>
            <p>Позволяют отслеживать изменения в коде и работать над проектом в команде.
            Популярные инструменты:
            <br>
            <b>Git</b> — система контроля версий.
            <br>
            <b>GitHub, GitLab</b> — платформы для хостинга репозиториев.
            <br>
            </p>
            <h4>Пример интерактивного элемента:</h4>
            <p>Нажмите, чтобы увидеть команду для клонирования репозитория:</p>
            <div style="text-align: center; margin: 20px;"> <button onclick="alert('git clone https://github.com/username/repo.git');" style="padding: 10px 20px; background-color: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer;"> Показать команду </button> </div>
            <h4>Иллюстрация:</h4>
            <img src="/images/delete-release-trash.png" alt="profile" class="responsive-image">
            <h2>3. Фреймворки и библиотеки</h2>
            <p>Упрощают создание сложных приложений за счет готовых решений.
            <br>
            Фронтенд: <b>React, Angular, Vue.js.</b>
            <br>
            Бэкенд: <b>Express.js, Django, Spring.</b>
            </p>
            <h4>Пример:</h4>
            <p>Код на React для вывода приветственного сообщения:</p>
            <h2>4. Инструменты тестирования</h2>
            <p>Позволяют проверять работоспособность приложений.
            <b>Jest, Mocha</b> — для тестирования JavaScript-кода.
            <b>Selenium</b> — для автоматизации тестов пользовательского интерфейса.
            </p>
            <h4>Пример интерактивного элемента:</h4>
            <p><div style="text-align: center; margin: 20px;"> <button onclick="alert('Все тесты успешно пройдены!');" style="padding: 10px 20px; background-color: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer;"> Провести тест </button> </div></p>
            <h3>Другие полезные инструменты</h3>
            <p>Сборщики проектов: <b>Webpack, Parcel.</b>
                Менеджеры пакетов: <b>npm, Yarn.</b>
                Системы автоматизации: <b>Jenkins, Travis CI.</b>
            </p>
        </div>
    `;
}

export function loadAboutCourse() {
    return `
        <div class="aboutCourses">
             <h1>О Курсе</h1>
             <p><b>Наш курс по программированию </b>создан для тех, кто хочет освоить веб-разработку с нуля или улучшить свои навыки. Мы предлагаем практический подход к обучению, который поможет вам понять современные технологии и научиться создавать полноценные веб-приложения.
             </p>
             <h2>Что вы изучите?</h2>
        <ol>
            <li>
                <strong>Основы программирования</strong>
                <ul>
                    <li>Работа с HTML, CSS и JavaScript.</li>
                    <li>Создание первых веб-страниц.</li>
                    <li>Основы алгоритмов и логики.</li>
                </ul>
            </li>
            <li>
                <strong>Фронтенд-разработка</strong>
                <ul>
                    <li>Адаптивный дизайн: сайты, которые отлично выглядят на любых устройствах.</li>
                    <li>Работа с популярными фреймворками (React или Vue.js).</li>
                    <li>Добавление интерактивности через JavaScript.</li>
                </ul>
            </li>
            <li>
                <strong>Бэкенд-разработка</strong>
                <ul>
                    <li>Основы работы с сервером (Node.js, Express).</li>
                    <li>Создание API для взаимодействия с клиентом.</li>
                    <li>Взаимодействие с базами данных (MongoDB, MySQL).</li>
                </ul>
            </li>
            <li>
                <strong>Современные инструменты разработки</strong>
                <ul>
                    <li>Использование систем контроля версий (Git, GitHub).</li>
                    <li>Настройка окружения для работы.</li>
                    <li>Сборка проектов с Webpack или Parcel.</li>
                </ul>
            </li>
            <li>
                <strong>Работа над проектом</strong>
                <ul>
                    <li>Каждый участник создаст свой проект от идеи до реализации.</li>
                    <li>Вы получите практику, которая подготовит вас к реальной работе.</li>
                </ul>
            </li>
        </ol>
        <h2>Почему выбрать наш курс?</h2>
        <ul>
            <li>Практический подход. Мы верим, что лучший способ научиться — это делать. Упор делается на реальные задачи.</li>
            <li>Поддержка наставников. Опытные разработчики помогут вам в любой момент.</li>
            <li>Обучение в удобном формате. Дистанционно, в удобное для вас время.</li>
            <li>Сертификат. Вы получите сертификат, подтверждающий ваши навыки.</li>
        </ul>
        <h2>Формат обучения</h2>
        <ol>
            <li>Длительность курса: 3 месяца.</li>
            <li>Формат: Онлайн занятия + самостоятельные задания.</li>
            <li>Платформа: Видеоуроки, прямые эфиры с наставниками и чат для вопросов.</li>
            <li>Домашние задания: С проверкой и обратной связью.</li>
        </ol>
        <h2>Для кого этот курс?</h2>
        <ul>
            <li>Для новичков, которые хотят освоить веб-разработку с нуля.</li>
            <li>Для тех, кто уже знаком с основами, но хочет перейти на новый уровень.</li>
            <li>Для фрилансеров, которые хотят улучшить навыки и привлечь больше клиентов.</li>
        </ul>
        <h2>Итог: что вы получите?</h2>
        <ul>
            <li>Уверенные знания веб-разработки.</li>
            <li>Портфолио из нескольких готовых проектов.</li>
            <li>Практические навыки, которые востребованы на рынке.</li>
            <li>Понимание архитектуры и инструментов разработки.</li>
        </ul>
        </div>
    `;
}

export function loadHowCourseWork() {
    return `
    <div class = "howCourseWork">
        <h1>Как проходить курс?</h1>
        <p>Чтобы обучение стало максимально эффективным и комфортным, мы разработали удобный формат прохождения курса. Следуйте этим простым шагам, чтобы получить максимальную пользу от занятий:</p>
        <h3>1. Подготовьтесь к занятиям</h3>
        <ul>
            <li>Убедитесь, что у вас есть стабильный интернет и удобное рабочее место.</li>
            <li>Настройте свой компьютер: установите текстовый редактор (например, Visual Studio Code) и браузер (Google Chrome, Mozilla Firefox).</li>
            <li>Если вы новичок, не переживайте — в первом занятии мы поможем вам настроить всё необходимое.</li>
        </ul>
        <p><strong>Совет:</strong> Зарегистрируйтесь на GitHub, чтобы сразу начать работать с системой контроля версий.</p>
        <h3>2. Регулярно посещайте уроки</h3>
        <ul>
            <li>Просматривайте видеолекции или участвуйте в прямых эфирах.</li>
            <li>Выполняйте задания в конце каждого урока. Они помогут закрепить пройденный материал.</li>
            <li>Если что-то непонятно, задавайте вопросы наставнику в чате или на платформе.</li>
        </ul>
        <div class="interactive-element">
            <p><strong>Интерактивный элемент:</strong> Поставьте галочку, когда выполните этап:</p>
            <div>
                <input type="checkbox" id="lesson1"> Урок 1: Основы HTML<br>
                <input type="checkbox" id="lesson2"> Урок 2: CSS и стилизация<br>
                <input type="checkbox" id="lesson3"> Урок 3: Основы JavaScript<br>
            </div>
        </div>
        <h3>3. Работайте с наставником</h3>
        <ul>
            <li>Задавайте вопросы, если столкнулись с трудностями.</li>
            <li>Обсуждайте свои идеи для проектов.</li>
            <li>Получайте подробную обратную связь по выполненным заданиям.</li>
        </ul>
        <h3>4. Выполняйте домашние задания</h3>
        <ul>
            <li>После каждого урока вы получите практическое задание.</li>
            <li>Выполняйте задания вовремя, чтобы идти в темпе группы.</li>
            <li>Домашние работы проверяются наставниками с подробными комментариями.</li>
        </ul>
        <p><strong>Пример задания:</strong> Создайте простую веб-страницу с приветствием и кнопкой, которая изменяет цвет текста при нажатии.</p>
        <h3>5. Работайте над проектом</h3>
        <ul>
            <li>В течение курса вы будете создавать свой веб-проект. Это может быть сайт, блог, интернет-магазин или веб-приложение.</li>
            <li>Завершённый проект станет частью вашего портфолио.</li>
        </ul>
        <p><strong>Идея:</strong> Добавьте таймер обратного отсчёта до дедлайна проекта, чтобы стимулировать участников.</p>
        <h3>6. Повторяйте материал</h3>
        <ul>
            <li>Пересматривайте уроки, которые вызвали трудности.</li>
            <li>Используйте дополнительные материалы (ссылки на статьи, книги, видео).</li>
        </ul>
        <h3>7. Завершите курс и получите сертификат</h3>
        <ul>
            <li>После успешного выполнения всех заданий вы получите сертификат, подтверждающий ваши знания.</li>
            <li>Сертификат можно добавить в резюме или LinkedIn, чтобы продемонстрировать свои навыки работодателям.</li>
        </ul>
        <p><strong>Совет:</strong> Не бойтесь ошибаться! Ошибки — это часть процесса обучения. Главное — задавайте вопросы и работайте над их устранением.</p>
    </div>
    `;
}